@model IEnumerable<WebApplication3.Models.Patient>

@{
    ViewData["Title"] = "Index";
}

@section scripts {
    <script type="text/javascript">
        
        $('.PatientGroupBy').not('#' + $('input[name=groupBy]:checked', '#groupByForm').val()).hide();


        $('#groupByForm label').on('change', function () {
            $('.PatientGroupBy').not('#' + $('input[name=groupBy]:checked', '#groupByForm').val()).hide();
            $('#' + $('input[name=groupBy]:checked', '#groupByForm').val()).show();
        });
        //$("#btnDelete").click(function () {
        //    $('#confirmDelete')[0].showModal();
        //    transition = window.setTimeout(function () {
        //        $('#confirmDelete').addClass('dialog-scale');
        //    }, 0.5);
        //})

        //$('#cancelDelete').on('click', function () {
        //    $('#confirmDelete')[0].close();
        //    $('#confirmDelete').removeClass('dialog-scale');
        //    clearTimeout(transition);
        //});
        var nIdToDelete;
        $(".btnDelete").click(function () {
            nIdToDelete = $(this).parent().parent().parent().parent().attr("id");
            //$(".modal-body #bookId").val(myBookId);
            // As pointed out in comments, 
            // it is superfluous to have to manually call the modal.
            // $('#addBookDialog').modal('show');
        });

        $(document).on('change', 'input:radio[id^="q_op_"]', function (event) {
            alert("click fired");
        });

        $("#DeletionConfirmed").click(function () {
            if (nIdToDelete == null) {
                alertify.error("Error Occurred");
            }
            else if (nIdToDelete == 1) {
                alertify.error("Admin cannot be deleted!");
            } else {
                $.ajax({
                    url: '/Patients/Delete',
                    type: 'post',
                    data: { id: nIdToDelete },
                    success: (function (result) {

                        $("#" + nIdToDelete).hide(500);
                        //$("#countofproducts").text("(" + result + ")");

                        //if (result == 0) {
                        //    $("#shoppingbag").css("display", "none");
                        //    $(".main-content").append($("<div>").text('לא קיימים פריטים בסל הקניות'));
                        //}

                        //var sum = $("#sum").text();
                        //$("#sum").text(sum - str[1])

                        alertify.success("The patient was deleted");
                    }),
                    error: (function (xhr, status) {
                        alertify.error("Delete failed");
                    })
                });
            }
        });

        //$("#buy").click(function () {

        //    $.ajax({
        //        url: '/ShoppingBag/Buy',
        //        type: 'Post',
        //        dataType: 'Json',
        //        success: (function (result) {

        //            if (result) {
        //                $("#shoppingBag").css("display", "none");
        //                $("#message").css("display", " block");
        //                $("#countOfProducts").text("(0)");

        //            }
        //            else {
        //                alert("רק משתמש קיים יכול לבצע הזמנה, אנא התחבר ונסה שנית");
        //            }
        //        }),
        //        error: (function (xhr, status) {
        //            alert(status);
        //        })
        //    });
        //});

        //$("#currencyNames").change(function () {

        //    var prevCurrency = $("#currency").val();
        //    var selCurrency = $("#currencyNames").val();
        //    if (selCurrency.length == 0) {
        //        selCurrency = "ILS";
        //    }

        //    $.ajax({
        //        url: '/WSConverter/CurrencyRate',
        //        type: 'Post',
        //        dataType: 'Json',
        //        data: { fromCurrency: prevCurrency, toCurrency: selCurrency },
        //        success: (function (result) {
        //            $("#currency").val(selCurrency);

        //            $(".priceConv").each(function () {
        //                var x = $(this).text();
        //                var d = Math.round((x * result) * 100) / 100;
        //                $(this).text(Math.round(d));
        //            });

        //            var oldSum = $("#sum").text();
        //            var s = Math.round((oldSum * result) * 100) / 100;
        //            $("#sum").text(Math.round(s));
        //        }),
        //        error: (function (xhr, status) {
        //            alert(status);
        //        })
        //    });
        //});

    </script>
}

<h2>Index</h2>


<p>
    <a asp-action="Create">Create New</a>
</p>


<div class="btn-group" data-toggle="buttons" id="groupByForm">
    <label class="btn btn-primary active">
        <input type="radio" name="groupBy" class="CgroupBy" value="regularPatientView" autocomplete="off" checked> Regular
    </label>
    <label class="btn btn-primary">
        <input type="radio" name="groupBy" class="CgroupBy" value="BirthdayGroupBy" autocomplete="off"> Birthday
    </label>
    <label class="btn btn-primary">
        <input type="radio" name="groupBy" class="CgroupBy" value="FirstNameGroupBy" autocomplete="off"> First Name
    </label>
</div>

@*<form id="groupByForm">
    <input type="radio" name="groupBy" value="regularPatientView" checked> Regular <br>
    <input type="radio" name="groupBy" value="BirthdayGroupBy"> Birthday<br>
    <input type="radio" name="groupBy" value="FirstNameGroupBy"> First Name
</form>*@


<table class="table PatientGroupBy" id="regularPatientView">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Birthday)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Email)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.FirstName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.LastName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Password)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Phone)
        </th>
        <th></th>
    </tr>
    
@foreach (var item in Model) {
    <tr id="@item.ID">
        <td>
            @Html.DisplayFor(modelItem => item.Birthday)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Email)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.FirstName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.LastName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Password)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Phone)
        </td>
        <td>
            
            @*לנסות את זה!!!*@
            <div class="btn-group" role="group">
                <button id="btnGroupDrop1" type="button" class="btn btn-secondary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    Options
                </button>
                <div class="dropdown-menu" role="group">
                    <button type="button" class="btn btn-outline-success btn-sm dropdown-item" id="btnDetails">Details</button>
                    <button type="button" class="btn btn-outline-info btn-sm dropdown-item" id="btnEdit">Edit</button>
                    <button type="button" class="btn btn-outline-danger btn-sm btnDelete dropdown-item" id="btnDelete" data-toggle="modal" data-target="#confirmDelete">Delete</button>
                    <button type="button" class="btn btn-outline-warning btn-sm dropdown-item" id="btnProcedure">Prodcedure</button>
                </div>
            </div>

            @*<div class="btn-group" role="group">
                <button type="button" class="btn btn-outline-success btn-sm" id="btnDetails">Details</button>
                <button type="button" class="btn btn-outline-info btn-sm" id="btnEdit">Edit</button>
                <button type="button" class="btn btn-outline-danger btn-sm btnDelete" id="btnDelete" data-toggle="modal" data-target="#confirmDelete">Delete</button>
                <button type="button" class="btn btn-outline-warning btn-sm" id="btnProcedure">Prodcedure</button>
            </div>*@
            @*<a asp-action="Edit" asp-route-id="@item.ID">Edit</a> |
            <a asp-action="Details" asp-route-id="@item.ID">Details</a> |
            <a asp-action="Delete" asp-route-id="@item.ID">Delete</a> |
            <a asp-controller="Procedures" asp-action="Create" asp-route-PatientID="@item.ID">Schedual New Prodcedure</a>*@
        </td>
    </tr>
}
</table>
<div class="modal fade" id="confirmDelete" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="myModalLabel">Patient Delete</h4>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this patient?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="DeletionConfirmed">Delete</button>
            </div>
        </div>
    </div>
</div>
@*<dialog id="confirmDelete" class="site-dialog">
    <header class="dialog-header">
        <h1>Please Confirm</h1>
    </header>
    <div class="dialog-content">
        <p>You are about to close your account. This action is irreversible. It will permanently delete your account along with its associated data. Are you sure you want to continue?</p>
    </div>
    <div class="btn-group cf">
        <button class="btn btn-danger" id="delete">Delete</button>
        <button class="btn btn-cancel" id="cancelDelete">Cancel</button>

    </div>
</dialog>*@
<ul class="PatientGroupBy" id="FirstNameGroupBy">
    @foreach (var group in Model.GroupBy(model => model.FirstName)) {

    <li>
       @Html.Encode(group.Key)
        <ul>

            @foreach (var item in group) {
            <li>@Html.Encode(item.LastName)</li>
            }

        </ul>
    </li>
    }
</ul>


<ul class="PatientGroupBy" id="BirthdayGroupBy">
    @foreach (var group in Model.GroupBy(model => model.Birthday))
    {

        <li>
            @Html.Encode(group.Key)
            <ul>

                @foreach (var item in group)
                {
                    <li>@Html.Encode(item.FirstName)</li>
                }

            </ul>
        </li>
    }
</ul>


@*<div id="deleteModal" class="modal fade" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Modal Header</h4>
            </div>
            <div class="modal-body">
                <p>Some text in the modal.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>*@


